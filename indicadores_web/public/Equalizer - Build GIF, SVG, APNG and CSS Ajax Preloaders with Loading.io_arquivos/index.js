(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
// Generated by LiveScript 1.3.0
(function(){
  var ret;
  ret = {
    id: 'equalizer',
    type: 'spinner',
    name: "Equalizer",
    desc: "Equalizer-style bouncing bars. used in radio, broadcast related website",
    tags: ['bar', 'column', 'chart', 'equalizer', 'histogram'],
    slug: "equalizer-bars-loader",
    license: 'pro',
    edit: {
      w: {
        name: 'Bar Width',
        type: 'number',
        'default': 10
      },
      h: {
        name: 'Bar Height',
        type: 'number',
        'default': 100
      },
      count: {
        name: "Bar Count",
        type: 'number',
        'default': 8,
        rebindOnChange: true
      },
      palette: {
        'default': {
          colors: ['#e15b64', '#f47e60', '#f8b26a', '#abbd81', '#849b87']
        }
      }
    },
    watch: function(n, o){
      return import$(this.local, {
        x1: 20 - n.w / 2,
        x2: 40 - n.w / 2,
        x3: 60 - n.w / 2,
        x4: 80 - n.w / 2,
        dur1: -0.2 / n.speed,
        dur2: -0.4 / n.speed,
        dur3: -0.6 / n.speed
      });
    },
    download: function(arg$){
      var type, ref$, cfg, lc, s, count, pal, len, map, res$, i$, i, html, css, begin, x, fill;
      type = arg$.type;
      if (type !== 'css') {
        return;
      }
      ref$ = [this.config, this.local], cfg = ref$[0], lc = ref$[1];
      s = (ref$ = cfg.size / 100) > 1 ? ref$ : 1;
      count = cfg.count;
      pal = cfg.palette.colors.map(function(it){
        return ldColor.web(it);
      });
      len = pal.length;
      res$ = [];
      for (i$ = 0; i$ < count; ++i$) {
        i = i$;
        res$.push(i);
      }
      map = res$;
      map.sort(function(){
        if (Math.random() - 0.5 > 0) {
          return 1;
        } else {
          return -1;
        }
      });
      html = "<div>" + repeatString$("<div></div>", count) + "</div>";
      css = "@keyframes $id {\n    0%    { height: " + s * 0.5 * cfg.h + "px }\n   33.33% { height: " + s * 0.75 * cfg.h + "px }\n   66.66% { height: " + s * 0.1 * cfg.h + "px }\n  100%    { height: " + s * 0.5 * cfg.h + "px }\n}\n.$id { transform-origin: " + cfg.size + "px " + cfg.size + "px!important }\n.$id > div {\n  transform: rotate(180deg);\n  width: 100%;\n  height: 100%;\n  transform-origin: " + cfg.size / 2 + "px " + cfg.size / 2 + "px;\n}\n.$id > div div {\n  position: absolute;\n  width: " + cfg.w * s + "px;\n  height: 80px;\n  top: " + s * (50 - 0.375 * cfg.h) + "px;\n  animation: $id " + 1 / cfg.speed + "s cubic-bezier(0.5,0,.5,1) infinite;\n}";
      for (i$ = 0; i$ < count; ++i$) {
        i = i$;
        begin = -(count - map[i] - 1) / count;
        x = (i + 1) * 100 / (count + 1) - cfg.w / 2;
        fill = pal[i % len];
        css += ".$id div div:nth-child(" + (i + 1) + ") {\n  transform: translate(" + x * s + "px, 0);\n  background: " + fill + ";\n  animation-delay: " + begin + "s;\n}";
      }
      return {
        html: html,
        css: css
      };
    },
    dom: function(config){
      var count, pal, len, map, res$, i$, i, svg, begin, x, fill;
      count = config.count;
      pal = config.palette.colors.map(function(it){
        return ldColor.web(it);
      });
      len = pal.length;
      res$ = [];
      for (i$ = 0; i$ < count; ++i$) {
        i = i$;
        res$.push(i);
      }
      map = res$;
      map.sort(function(){
        if (Math.random() - 0.5 > 0) {
          return 1;
        } else {
          return -1;
        }
      });
      svg = ["<g transform=\"rotate(180 50 50)\">"];
      for (i$ = 0; i$ < count; ++i$) {
        i = i$;
        begin = (-(count - map[i] - 1) / count) / config.speed;
        x = (i + 1) * 100 / (count + 1);
        fill = pal[i % len];
        svg.push("<rect x=\"" + (x - config.w / 2) + "\" y=\"" + (50 - 0.375 * config.h) + "\"\nwidth=\"" + config.w + "\" height=\"40\" fill=\"" + fill + "\">\n  <animate attributeName=\"height\" calcMode=\"spline\"\n  values=\"" + 0.5 * config.h + ";" + 0.75 * config.h + ";" + 0.1 * config.h + ";" + 0.5 * config.h + "\"\n  times=\"0;0.33;0.66;1\" dur=\"" + 1 / config.speed + "s\"\n  keySplines=\"0.5 0 0.5 1;0.5 0 0.5 1;0.5 0 0.5 1\"\n  repeatCount=\"indefinite\"\n  begin=\"" + begin + "s\"/>\n</rect>");
      }
      svg.push("</g>");
      return svg.join("");
    }
  };
  if (typeof module != 'undefined' && module !== null) {
    module.exports = ret;
  }
  if (typeof ModManager != 'undefined' && ModManager !== null) {
    ModManager.register(ret);
  }
  return ret;
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}
function repeatString$(str, n){
  for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
  return r;
}
},{}]},{},[1]);
